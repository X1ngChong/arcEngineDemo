package com.demo.overall.impl.matrix;

import com.Bean.Pair;
import com.Bean.PathResult;
import com.Bean.RealNodeInfo;
import com.demo.overall.NewDemoRun.meetRelation.CalculateGroupSim;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * 根据对应的下标去获取真实的groupId
 真实结果列表:修改前
 0:[98, 94, 100, 96]:[110, 111, 112, 113]
 1:[95, 93, 99, 92]:[110, 111, 112, 113]
 2:[95, 93, 92, 99]:[110, 111, 113, 112]
 3:[95, 99, 93, 92]:[110, 112, 111, 113]
 4:[95, 99, 92, 93]:[110, 112, 113, 111]
 5:[98, 96, 100, 94]:[110, 113, 112, 111]
 6:[95, 92, 93, 99]:[110, 113, 111, 112]
 7:[95, 92, 99, 93]:[110, 113, 112, 111]
 8:[93, 99, 95, 92]:[111, 112, 110, 113]
 9:[93, 99, 92, 95]:[111, 112, 113, 110]
 10:[94, 100, 96, 98]:[111, 112, 113, 110]
 11:[93, 92, 95, 99]:[111, 113, 110, 112]
 12:[93, 92, 99, 95]:[111, 113, 112, 110]
 13:[99, 92, 95, 93]:[112, 113, 110, 111]
 14:[99, 92, 93, 95]:[112, 113, 111, 110]
 15:[100, 96, 98, 94]:[112, 113, 110, 111]
 16:[97, 101, 99, 92]:[110, 111, 112, 113]
 17:[97, 101, 93, 91]:[110, 111, 112, 113]
 18:[97, 92, 99, 101]:[110, 113, 112, 111]
 19:[97, 91, 93, 101]:[110, 113, 112, 111]
 20:[101, 99, 92, 97]:[111, 112, 113, 110]
 21:[101, 93, 91, 97]:[111, 112, 113, 110]
 22:[99, 92, 97, 101]:[112, 113, 110, 111]
 23:[93, 91, 97, 101]:[112, 113, 110, 111]
 24:[98, 94, 96, 100]:[110, 111, 113, 112]
 25:[95, 97, 99, 92]:[110, 111, 112, 113]
 26:[97, 93, 99, 92]:[110, 111, 112, 113]
 27:[97, 101, 91, 93]:[110, 111, 113, 112]
 28:[98, 100, 93, 92]:[110, 112, 111, 113]
 29:[98, 100, 94, 96]:[110, 112, 111, 113]
 30:[98, 100, 95, 99]:[110, 112, 111, 113]
 31:[98, 100, 96, 94]:[110, 112, 113, 111]
 32:[95, 99, 101, 91]:[110, 112, 111, 113]
 33:[97, 93, 91, 101]:[110, 112, 113, 111]
 34:[94, 99, 93, 92]:[110, 112, 111, 113]
 35:[94, 96, 93, 92]:[110, 112, 111, 113]
 36:[98, 92, 93, 100]:[110, 113, 111, 112]
 37:[98, 96, 94, 100]:[110, 113, 111, 112]
 38:[98, 99, 95, 100]:[110, 113, 111, 112]
 39:[95, 92, 99, 97]:[110, 113, 112, 111]
 40:[95, 91, 101, 99]:[110, 113, 111, 112]
 41:[97, 92, 99, 93]:[110, 113, 112, 111]
 42:[94, 92, 93, 99]:[110, 113, 111, 112]
 43:[94, 92, 93, 96]:[110, 113, 111, 112]
 44:[93, 97, 92, 99]:[111, 110, 113, 112]
 45:[93, 99, 94, 92]:[111, 112, 110, 113]
 46:[93, 99, 92, 97]:[111, 112, 113, 110]
 47:[93, 100, 98, 92]:[111, 112, 110, 113]
 48:[93, 96, 94, 92]:[111, 112, 110, 113]
 49:[94, 100, 98, 96]:[111, 112, 110, 113]
 50:[95, 100, 98, 99]:[111, 112, 110, 113]
 51:[101, 99, 95, 91]:[111, 112, 110, 113]
 52:[97, 99, 92, 95]:[111, 112, 113, 110]
 53:[93, 92, 98, 100]:[111, 113, 110, 112]
 54:[93, 92, 94, 99]:[111, 113, 110, 112]
 55:[93, 92, 94, 96]:[111, 113, 110, 112]
 56:[94, 96, 98, 100]:[111, 113, 110, 112]
 57:[94, 96, 100, 98]:[111, 113, 112, 110]
 58:[95, 99, 98, 100]:[111, 113, 110, 112]
 59:[101, 91, 95, 99]:[111, 113, 110, 112]
 60:[101, 91, 93, 97]:[111, 113, 112, 110]
 61:[95, 96, 94, 93]:[112, 111, 110, 113]
 62:[93, 96, 100, 91]:[112, 111, 110, 113]
 63:[101, 96, 100, 91]:[112, 111, 110, 113]
 64:[99, 92, 95, 97]:[112, 113, 110, 111]
 65:[99, 92, 97, 93]:[112, 113, 110, 111]
 66:[100, 96, 94, 98]:[112, 113, 111, 110]
 67:[93, 91, 101, 97]:[112, 113, 111, 110]
 68:[95, 93, 100, 96]:[110, 111, 112, 113]
 69:[97, 101, 100, 96]:[110, 111, 112, 113]
 70:[95, 96, 100, 93]:[110, 113, 112, 111]
 71:[97, 96, 100, 101]:[110, 113, 112, 111]
 72:[93, 100, 96, 95]:[111, 112, 113, 110]
 73:[101, 100, 96, 97]:[111, 112, 113, 110]
 74:[95, 96, 100, 93]:[112, 111, 110, 113]
 75:[100, 96, 95, 93]:[112, 113, 110, 111]
 76:[100, 96, 97, 101]:[112, 113, 110, 111]
 77:[93, 97, 101, 95]:[113, 110, 111, 112]
 78:[97, 101, 94, 99]:[110, 111, 112, 113]
 79:[101, 91, 99, 92]:[110, 111, 112, 113]
 80:[98, 100, 94, 99]:[110, 112, 111, 113]
 81:[98, 100, 101, 91]:[110, 112, 111, 113]
 82:[98, 100, 97, 93]:[110, 112, 111, 113]
 83:[98, 100, 97, 95]:[110, 112, 111, 113]
 84:[97, 95, 101, 91]:[110, 112, 111, 113]
 85:[97, 93, 101, 91]:[110, 112, 111, 113]
 86:[94, 99, 101, 91]:[110, 112, 111, 113]
 87:[94, 96, 101, 91]:[110, 112, 111, 113]
 88:[94, 96, 97, 93]:[110, 112, 111, 113]
 89:[98, 93, 97, 100]:[110, 113, 111, 112]
 90:[98, 95, 97, 100]:[110, 113, 111, 112]
 91:[98, 99, 94, 100]:[110, 113, 111, 112]
 92:[98, 91, 101, 100]:[110, 113, 111, 112]
 93:[97, 99, 94, 101]:[110, 113, 112, 111]
 94:[97, 91, 101, 95]:[110, 113, 111, 112]
 95:[97, 91, 101, 93]:[110, 113, 111, 112]
 96:[101, 92, 99, 91]:[110, 113, 112, 111]
 97:[94, 93, 97, 96]:[110, 113, 111, 112]
 98:[94, 91, 101, 99]:[110, 113, 111, 112]
 99:[94, 91, 101, 96]:[110, 113, 111, 112]

 真实结果列表:修改后
 0:[98, 94, 100, 96]:[110, 111, 112, 113]
 1:[95, 93, 99, 92]:[110, 111, 112, 113]
 2:[95, 93, 92, 99]:[110, 111, 113, 112]
 3:[95, 99, 93, 92]:[110, 112, 111, 113]
 4:[95, 99, 92, 93]:[110, 112, 113, 111]
 5:[98, 96, 100, 94]:[110, 113, 112, 111]
 6:[95, 92, 93, 99]:[110, 113, 111, 112]
 7:[95, 92, 99, 93]:[110, 113, 112, 111]
 8:[93, 95, 99, 92]:[111, 110, 112, 113]
 9:[93, 95, 92, 99]:[111, 110, 113, 112]
 10:[94, 98, 96, 100]:[111, 110, 113, 112]
 11:[93, 99, 95, 92]:[111, 112, 110, 113]
 12:[93, 99, 92, 95]:[111, 112, 113, 110]
 13:[94, 100, 96, 98]:[111, 112, 113, 110]
 14:[93, 92, 95, 99]:[111, 113, 110, 112]
 15:[93, 92, 99, 95]:[111, 113, 112, 110]
 16:[99, 95, 93, 92]:[112, 110, 111, 113]
 17:[99, 95, 92, 93]:[112, 110, 113, 111]
 18:[99, 93, 95, 92]:[112, 111, 110, 113]
 19:[99, 93, 92, 95]:[112, 111, 113, 110]
 20:[100, 94, 98, 96]:[112, 111, 110, 113]
 21:[99, 92, 95, 93]:[112, 113, 110, 111]
 22:[99, 92, 93, 95]:[112, 113, 111, 110]
 23:[100, 96, 98, 94]:[112, 113, 110, 111]
 24:[92, 95, 93, 99]:[113, 110, 111, 112]
 25:[92, 95, 99, 93]:[113, 110, 112, 111]
 26:[96, 98, 94, 100]:[113, 110, 111, 112]
 27:[92, 93, 95, 99]:[113, 111, 110, 112]
 28:[92, 93, 99, 95]:[113, 111, 112, 110]
 29:[92, 99, 95, 93]:[113, 112, 110, 111]
 30:[92, 99, 93, 95]:[113, 112, 111, 110]
 31:[96, 100, 94, 98]:[113, 112, 111, 110]
 32:[97, 101, 99, 92]:[110, 111, 112, 113]
 33:[97, 101, 93, 91]:[110, 111, 112, 113]
 34:[97, 92, 99, 101]:[110, 113, 112, 111]
 35:[97, 91, 93, 101]:[110, 113, 112, 111]
 36:[101, 97, 92, 99]:[111, 110, 113, 112]
 37:[101, 97, 91, 93]:[111, 110, 113, 112]
 38:[101, 99, 92, 97]:[111, 112, 113, 110]
 39:[101, 93, 91, 97]:[111, 112, 113, 110]
 40:[99, 101, 97, 92]:[112, 111, 110, 113]
 41:[93, 101, 97, 91]:[112, 111, 110, 113]
 42:[99, 92, 97, 101]:[112, 113, 110, 111]
 43:[93, 91, 97, 101]:[112, 113, 110, 111]
 44:[92, 97, 101, 99]:[113, 110, 111, 112]
 45:[91, 97, 101, 93]:[113, 110, 111, 112]
 46:[92, 99, 101, 97]:[113, 112, 111, 110]
 47:[91, 93, 101, 97]:[113, 112, 111, 110]
 48:[98, 94, 96, 100]:[110, 111, 113, 112]
 49:[95, 97, 99, 92]:[110, 111, 112, 113]
 50:[97, 93, 99, 92]:[110, 111, 112, 113]
 51:[97, 101, 91, 93]:[110, 111, 113, 112]
 52:[98, 100, 93, 92]:[110, 112, 111, 113]
 53:[98, 100, 94, 96]:[110, 112, 111, 113]
 54:[98, 100, 95, 99]:[110, 112, 111, 113]
 55:[98, 100, 96, 94]:[110, 112, 113, 111]
 56:[95, 99, 101, 91]:[110, 112, 111, 113]
 57:[97, 93, 91, 101]:[110, 112, 113, 111]
 58:[94, 99, 93, 92]:[110, 112, 111, 113]
 59:[94, 96, 93, 92]:[110, 112, 111, 113]
 60:[98, 92, 93, 100]:[110, 113, 111, 112]
 61:[98, 96, 94, 100]:[110, 113, 111, 112]
 62:[98, 99, 95, 100]:[110, 113, 111, 112]
 63:[95, 92, 99, 97]:[110, 113, 112, 111]
 64:[95, 91, 101, 99]:[110, 113, 111, 112]
 65:[97, 92, 99, 93]:[110, 113, 112, 111]
 66:[94, 92, 93, 99]:[110, 113, 111, 112]
 67:[94, 92, 93, 96]:[110, 113, 111, 112]
 68:[93, 97, 92, 99]:[111, 110, 113, 112]
 69:[94, 98, 100, 96]:[111, 110, 112, 113]
 70:[101, 97, 93, 91]:[111, 110, 112, 113]
 71:[97, 95, 92, 99]:[111, 110, 113, 112]
 72:[93, 99, 94, 92]:[111, 112, 110, 113]
 73:[93, 99, 92, 97]:[111, 112, 113, 110]
 74:[93, 100, 98, 92]:[111, 112, 110, 113]
 75:[93, 96, 94, 92]:[111, 112, 110, 113]
 76:[94, 100, 98, 96]:[111, 112, 110, 113]
 77:[95, 100, 98, 99]:[111, 112, 110, 113]
 78:[101, 99, 95, 91]:[111, 112, 110, 113]
 79:[97, 99, 92, 95]:[111, 112, 113, 110]
 80:[93, 92, 98, 100]:[111, 113, 110, 112]
 81:[93, 92, 94, 99]:[111, 113, 110, 112]
 82:[93, 92, 94, 96]:[111, 113, 110, 112]
 83:[94, 96, 98, 100]:[111, 113, 110, 112]
 84:[94, 96, 100, 98]:[111, 113, 112, 110]
 85:[95, 99, 98, 100]:[111, 113, 110, 112]
 86:[101, 91, 95, 99]:[111, 113, 110, 112]
 87:[101, 91, 93, 97]:[111, 113, 112, 110]
 88:[99, 95, 91, 101]:[112, 110, 113, 111]
 89:[99, 94, 92, 93]:[112, 110, 113, 111]
 90:[100, 98, 94, 96]:[112, 110, 111, 113]
 91:[100, 98, 92, 93]:[112, 110, 113, 111]
 92:[100, 98, 96, 94]:[112, 110, 113, 111]
 93:[100, 98, 99, 95]:[112, 110, 113, 111]
 94:[93, 97, 101, 91]:[112, 110, 111, 113]
 95:[96, 94, 92, 93]:[112, 110, 113, 111]
 96:[99, 93, 97, 92]:[112, 111, 110, 113]
 97:[99, 93, 92, 94]:[112, 111, 113, 110]
 98:[99, 101, 91, 95]:[112, 111, 113, 110]
 99:[99, 97, 95, 92]:[112, 111, 110, 113]
 */
@Component
public class GetFinalResultByMatrix {
    public static void main(String[] args) {
        GetFinalResultByMatrix getFinalResultByMatrix = new GetFinalResultByMatrix();
        List<Integer[]> finalResultByMatrix = getFinalResultByMatrix.getFinalResultByMatrix();
        GetFinalMatrix2 getFinalMatrix = new GetFinalMatrix2();
        List<PathResult> resulyList = getFinalMatrix.getResulyList();
                    // 格式化输出
            System.out.println("真实结果列表:");
       for (int i = 0; i < 100 ; i++) {
           System.out.println(i+":"+ Arrays.toString(finalResultByMatrix.get(i))+
                   ":"+ Arrays.toString(resulyList.get(i).getPath().stream().limit(4).toArray()));
       }

    }
    public   List<Integer[]> getFinalResultByMatrix() {
        CalculateGroupSim d = new CalculateGroupSim();
        Map<Integer, List<RealNodeInfo>> sketchToRealMap = d.firstFilter(); // 对应的结果下标
        GetFinalMatrix2 getFinalMatrix = new GetFinalMatrix2();
        List<Integer[]> realResultList = new ArrayList<>();

        List<PathResult> resulyList = getFinalMatrix.getResulyList();

        // 输出前N个结果
       // System.out.println("根据权值排序的结果:");
        if (resulyList.isEmpty()) {
            System.out.println("No paths found.");
        } else {
            for (PathResult result : resulyList) {
                List<String> path = result.getPath();
                List<Integer> indexList = result.getIndexList();
               List<Integer> temp = new ArrayList<>();
                for (int i = 0; i < path.size()-1; i++) {
                    List<RealNodeInfo> realNodeInfos = sketchToRealMap.get(Integer.parseInt(path.get(i)));
                    int realNodeId = realNodeInfos.get(indexList.get(i)).getRealNodeId();
                    temp.add(realNodeId);
                }

                realResultList.add(temp.toArray(new Integer[0]));

                if (realResultList.size()>=100){
                    break;
                }
            }

        }
        return realResultList;
    }

    public List<Pair<Double, Integer[]>> getFinalResult() {
        CalculateGroupSim d = new CalculateGroupSim();
        Map<Integer, List<RealNodeInfo>> sketchToRealMap = d.firstFilter(); // 对应的结果下标
        GetFinalMatrix2 getFinalMatrix = new GetFinalMatrix2();
        List<Pair<Double, Integer[]>> realResultList = new ArrayList<>();

        List<PathResult> resultList = getFinalMatrix.getResulyList();

        // 输出前N个结果
        if (resultList.isEmpty()) {
            System.out.println("No paths found.");
        } else {
            for (PathResult result : resultList) {
                List<String> path = result.getPath();
                List<Integer> indexList = result.getIndexList();
                Integer[] temp = new Integer[path.size() - 1];
                for (int i = 0; i < path.size() - 1; i++) {
                    List<RealNodeInfo> realNodeInfos = sketchToRealMap.get(Integer.parseInt(path.get(i)));
                    int realNodeId = realNodeInfos.get(indexList.get(i)).getRealNodeId();
                    temp[i] = realNodeId;
                }

                // 获取权值
                double weight = result.getWeight();

                // 将权值和对应的整数数组加入结果列表
                realResultList.add(new Pair<>(weight, temp));

                if (realResultList.size() >= 100) {
                    break;
                }
            }
        }

        // 按照权值降序排序
        realResultList.sort((a, b) -> {
            int comparison = Double.compare(b.getKey(), a.getKey());
            if (comparison == 0) {
                // 如果权值相等，可以根据其他标准排序，例如根据数组的哈希值
                return Integer.compare(Arrays.hashCode(a.getValue()), Arrays.hashCode(b.getValue()));
            }
            return comparison;
        });

        return realResultList;
    }
}